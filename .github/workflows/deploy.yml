name: Python Microservices with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write  # Allow pushing Docker images to GHCR

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - uses: actions/checkout@v4

    # Step 2: Set up Python environment
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    # Step 3: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        for service in product-service order-service inventory-service; do
          if [ -f $service/requirements.txt ]; then pip install -r $service/requirements.txt; fi
        done

    # Step 4: Lint with flake8
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Step 5: Debug test discovery
    - name: Debug test discovery
      run: |
        for service in product-service order-service inventory-service; do
          echo "Collecting tests for $service..."
          pytest $service/tests --collect-only
        done

    # Step 6: Run tests
    - name: Run tests
      run: |
        for service in product-service order-service inventory-service; do
          echo "Running tests for $service..."
          pytest $service/tests
        done

    # Step 7: Set IMAGE_TAG environment variable
    - name: Set IMAGE_TAG
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    # Step 8: Update Kubernetes deployment file with the correct image tag
    - name: Update Kubernetes deployment file with the correct image tag
      run: |
        IMAGE_TAG=${{ env.IMAGE_TAG }}
        sed -i "s|ghcr.io/${{ github.repository_owner }}/inventory-service:.*|ghcr.io/${{ github.repository_owner }}/inventory-service:$IMAGE_TAG|" mtr-manifests/inventory-service.yaml
        sed -i "s|ghcr.io/${{ github.repository_owner }}/order-service:.*|ghcr.io/${{ github.repository_owner }}/order-service:$IMAGE_TAG|" mtr-manifests/order-service.yaml
        sed -i "s|ghcr.io/${{ github.repository_owner }}/product-service:.*|ghcr.io/${{ github.repository_owner }}/product-service:$IMAGE_TAG|" mtr-manifests/product-service.yaml

    # Step 9: Log in to GitHub Container Registry
    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 10: Build & Push Docker images for each service
    - name: Build & Push Docker images
      run: |
        for service in product-service order-service inventory-service; do
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/$service"
          echo "Building Docker image for $service..."
          docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest ./$service
          echo "Pushing Docker image $IMAGE_NAME:$IMAGE_TAG"
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
        done
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}

    # Step 11: Run Docker containers (Optional for testing)
    - name: Run Docker containers (optional)
      run: |
        for service in product-service order-service inventory-service; do
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$service
          case $service in
            product-service) PORT=5001 ;;
            order-service) PORT=5002 ;;
            inventory-service) PORT=5003 ;;
          esac
          docker run -d --rm -p $PORT:5000 --name $service $IMAGE_NAME:$IMAGE_TAG
        done
      env:
        IMAGE_TAG: ${{ env.IMAGE_TAG }}

    # Step 12: Update Kubernetes manifests
        # Step 12: Replace environment variables in Kubernetes manifests before applying
    - name: Update and apply Kubernetes manifests
      run: |
        export IMAGE_TAG=${{ env.IMAGE_TAG }}
        export REPO_OWNER=${{ github.repository_owner }}

        for service in product-service order-service inventory-service; do
          envsubst < k8s/$service.yaml > mtr-manifests/$service-updated.yaml
          mv k8s/$service-updated.yaml mtr-manifests/$service.yaml
        done

        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add mtr-manifest/*.yaml
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Update image tags to $IMAGE_TAG"
          git push
        fi
